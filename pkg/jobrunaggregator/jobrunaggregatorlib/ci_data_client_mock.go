// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/ci-tools/pkg/jobrunaggregator/jobrunaggregatorlib (interfaces: CIDataClient)
//
// Generated by this command:
//
//	mockgen -build_flags=--mod=mod -destination=pkg/jobrunaggregator/jobrunaggregatorlib/ci_data_client_mock.go -package=jobrunaggregatorlib github.com/openshift/ci-tools/pkg/jobrunaggregator/jobrunaggregatorlib CIDataClient
//

// Package jobrunaggregatorlib is a generated GoMock package.
package jobrunaggregatorlib

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"

	jobrunaggregatorapi "github.com/openshift/ci-tools/pkg/jobrunaggregator/jobrunaggregatorapi"
)

// MockCIDataClient is a mock of CIDataClient interface.
type MockCIDataClient struct {
	ctrl     *gomock.Controller
	recorder *MockCIDataClientMockRecorder
	isgomock struct{}
}

// MockCIDataClientMockRecorder is the mock recorder for MockCIDataClient.
type MockCIDataClientMockRecorder struct {
	mock *MockCIDataClient
}

// NewMockCIDataClient creates a new mock instance.
func NewMockCIDataClient(ctrl *gomock.Controller) *MockCIDataClient {
	mock := &MockCIDataClient{ctrl: ctrl}
	mock.recorder = &MockCIDataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCIDataClient) EXPECT() *MockCIDataClientMockRecorder {
	return m.recorder
}

// GetBackendDisruptionRowCountByJob mocks base method.
func (m *MockCIDataClient) GetBackendDisruptionRowCountByJob(ctx context.Context, jobName, masterNodesUpdated string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendDisruptionRowCountByJob", ctx, jobName, masterNodesUpdated)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendDisruptionRowCountByJob indicates an expected call of GetBackendDisruptionRowCountByJob.
func (mr *MockCIDataClientMockRecorder) GetBackendDisruptionRowCountByJob(ctx, jobName, masterNodesUpdated any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendDisruptionRowCountByJob", reflect.TypeOf((*MockCIDataClient)(nil).GetBackendDisruptionRowCountByJob), ctx, jobName, masterNodesUpdated)
}

// GetBackendDisruptionStatisticsByJob mocks base method.
func (m *MockCIDataClient) GetBackendDisruptionStatisticsByJob(ctx context.Context, jobName, masterNodesUpdated string) ([]jobrunaggregatorapi.BackendDisruptionStatisticsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendDisruptionStatisticsByJob", ctx, jobName, masterNodesUpdated)
	ret0, _ := ret[0].([]jobrunaggregatorapi.BackendDisruptionStatisticsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBackendDisruptionStatisticsByJob indicates an expected call of GetBackendDisruptionStatisticsByJob.
func (mr *MockCIDataClientMockRecorder) GetBackendDisruptionStatisticsByJob(ctx, jobName, masterNodesUpdated any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendDisruptionStatisticsByJob", reflect.TypeOf((*MockCIDataClient)(nil).GetBackendDisruptionStatisticsByJob), ctx, jobName, masterNodesUpdated)
}

// GetJobRunForJobNameAfterTime mocks base method.
func (m *MockCIDataClient) GetJobRunForJobNameAfterTime(ctx context.Context, jobName string, targetTime time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRunForJobNameAfterTime", ctx, jobName, targetTime)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobRunForJobNameAfterTime indicates an expected call of GetJobRunForJobNameAfterTime.
func (mr *MockCIDataClientMockRecorder) GetJobRunForJobNameAfterTime(ctx, jobName, targetTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRunForJobNameAfterTime", reflect.TypeOf((*MockCIDataClient)(nil).GetJobRunForJobNameAfterTime), ctx, jobName, targetTime)
}

// GetJobRunForJobNameBeforeTime mocks base method.
func (m *MockCIDataClient) GetJobRunForJobNameBeforeTime(ctx context.Context, jobName string, targetTime time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobRunForJobNameBeforeTime", ctx, jobName, targetTime)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobRunForJobNameBeforeTime indicates an expected call of GetJobRunForJobNameBeforeTime.
func (mr *MockCIDataClientMockRecorder) GetJobRunForJobNameBeforeTime(ctx, jobName, targetTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobRunForJobNameBeforeTime", reflect.TypeOf((*MockCIDataClient)(nil).GetJobRunForJobNameBeforeTime), ctx, jobName, targetTime)
}

// GetJobVariants mocks base method.
func (m *MockCIDataClient) GetJobVariants(ctx context.Context, jobName string) (*jobrunaggregatorapi.JobRowWithVariants, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetJobVariants", ctx, jobName)
	ret0, _ := ret[0].(*jobrunaggregatorapi.JobRowWithVariants)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetJobVariants indicates an expected call of GetJobVariants.
func (mr *MockCIDataClientMockRecorder) GetJobVariants(ctx, jobName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobVariants", reflect.TypeOf((*MockCIDataClient)(nil).GetJobVariants), ctx, jobName)
}

// GetLastJobRunEndTimeFromTable mocks base method.
func (m *MockCIDataClient) GetLastJobRunEndTimeFromTable(ctx context.Context, table string) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastJobRunEndTimeFromTable", ctx, table)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastJobRunEndTimeFromTable indicates an expected call of GetLastJobRunEndTimeFromTable.
func (mr *MockCIDataClientMockRecorder) GetLastJobRunEndTimeFromTable(ctx, table any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastJobRunEndTimeFromTable", reflect.TypeOf((*MockCIDataClient)(nil).GetLastJobRunEndTimeFromTable), ctx, table)
}

// ListAggregatedTestRunsForJob mocks base method.
func (m *MockCIDataClient) ListAggregatedTestRunsForJob(ctx context.Context, frequency, jobName string, startDay time.Time) ([]jobrunaggregatorapi.AggregatedTestRunRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAggregatedTestRunsForJob", ctx, frequency, jobName, startDay)
	ret0, _ := ret[0].([]jobrunaggregatorapi.AggregatedTestRunRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAggregatedTestRunsForJob indicates an expected call of ListAggregatedTestRunsForJob.
func (mr *MockCIDataClientMockRecorder) ListAggregatedTestRunsForJob(ctx, frequency, jobName, startDay any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAggregatedTestRunsForJob", reflect.TypeOf((*MockCIDataClient)(nil).ListAggregatedTestRunsForJob), ctx, frequency, jobName, startDay)
}

// ListAlertHistoricalData mocks base method.
func (m *MockCIDataClient) ListAlertHistoricalData(ctx context.Context) ([]*jobrunaggregatorapi.AlertHistoricalDataRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAlertHistoricalData", ctx)
	ret0, _ := ret[0].([]*jobrunaggregatorapi.AlertHistoricalDataRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAlertHistoricalData indicates an expected call of ListAlertHistoricalData.
func (mr *MockCIDataClientMockRecorder) ListAlertHistoricalData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAlertHistoricalData", reflect.TypeOf((*MockCIDataClient)(nil).ListAlertHistoricalData), ctx)
}

// ListAllJobs mocks base method.
func (m *MockCIDataClient) ListAllJobs(ctx context.Context) ([]jobrunaggregatorapi.JobRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllJobs", ctx)
	ret0, _ := ret[0].([]jobrunaggregatorapi.JobRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllJobs indicates an expected call of ListAllJobs.
func (mr *MockCIDataClientMockRecorder) ListAllJobs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllJobs", reflect.TypeOf((*MockCIDataClient)(nil).ListAllJobs), ctx)
}

// ListAllJobsWithVariants mocks base method.
func (m *MockCIDataClient) ListAllJobsWithVariants(ctx context.Context) ([]jobrunaggregatorapi.JobRowWithVariants, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllJobsWithVariants", ctx)
	ret0, _ := ret[0].([]jobrunaggregatorapi.JobRowWithVariants)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllJobsWithVariants indicates an expected call of ListAllJobsWithVariants.
func (mr *MockCIDataClientMockRecorder) ListAllJobsWithVariants(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllJobsWithVariants", reflect.TypeOf((*MockCIDataClient)(nil).ListAllJobsWithVariants), ctx)
}

// ListAllKnownAlerts mocks base method.
func (m *MockCIDataClient) ListAllKnownAlerts(ctx context.Context) ([]*jobrunaggregatorapi.KnownAlertRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllKnownAlerts", ctx)
	ret0, _ := ret[0].([]*jobrunaggregatorapi.KnownAlertRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllKnownAlerts indicates an expected call of ListAllKnownAlerts.
func (mr *MockCIDataClientMockRecorder) ListAllKnownAlerts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllKnownAlerts", reflect.TypeOf((*MockCIDataClient)(nil).ListAllKnownAlerts), ctx)
}

// ListDisruptionHistoricalData mocks base method.
func (m *MockCIDataClient) ListDisruptionHistoricalData(ctx context.Context) ([]jobrunaggregatorapi.HistoricalData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDisruptionHistoricalData", ctx)
	ret0, _ := ret[0].([]jobrunaggregatorapi.HistoricalData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDisruptionHistoricalData indicates an expected call of ListDisruptionHistoricalData.
func (mr *MockCIDataClientMockRecorder) ListDisruptionHistoricalData(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDisruptionHistoricalData", reflect.TypeOf((*MockCIDataClient)(nil).ListDisruptionHistoricalData), ctx)
}

// ListProwJobRunsSince mocks base method.
func (m *MockCIDataClient) ListProwJobRunsSince(ctx context.Context, since *time.Time) ([]*jobrunaggregatorapi.TestPlatformProwJobRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProwJobRunsSince", ctx, since)
	ret0, _ := ret[0].([]*jobrunaggregatorapi.TestPlatformProwJobRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProwJobRunsSince indicates an expected call of ListProwJobRunsSince.
func (mr *MockCIDataClientMockRecorder) ListProwJobRunsSince(ctx, since any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProwJobRunsSince", reflect.TypeOf((*MockCIDataClient)(nil).ListProwJobRunsSince), ctx, since)
}

// ListReleaseTags mocks base method.
func (m *MockCIDataClient) ListReleaseTags(ctx context.Context) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReleaseTags", ctx)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReleaseTags indicates an expected call of ListReleaseTags.
func (mr *MockCIDataClientMockRecorder) ListReleaseTags(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleaseTags", reflect.TypeOf((*MockCIDataClient)(nil).ListReleaseTags), ctx)
}

// ListReleases mocks base method.
func (m *MockCIDataClient) ListReleases(ctx context.Context) ([]jobrunaggregatorapi.ReleaseRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListReleases", ctx)
	ret0, _ := ret[0].([]jobrunaggregatorapi.ReleaseRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListReleases indicates an expected call of ListReleases.
func (mr *MockCIDataClientMockRecorder) ListReleases(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListReleases", reflect.TypeOf((*MockCIDataClient)(nil).ListReleases), ctx)
}

// ListUploadedJobRunIDsSinceFromTable mocks base method.
func (m *MockCIDataClient) ListUploadedJobRunIDsSinceFromTable(ctx context.Context, table string, since *time.Time) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUploadedJobRunIDsSinceFromTable", ctx, table, since)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUploadedJobRunIDsSinceFromTable indicates an expected call of ListUploadedJobRunIDsSinceFromTable.
func (mr *MockCIDataClientMockRecorder) ListUploadedJobRunIDsSinceFromTable(ctx, table, since any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUploadedJobRunIDsSinceFromTable", reflect.TypeOf((*MockCIDataClient)(nil).ListUploadedJobRunIDsSinceFromTable), ctx, table, since)
}
