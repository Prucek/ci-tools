// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/openshift/ci-tools/pkg/jobrunaggregator/jobrunaggregatorlib (interfaces: CIGCSClient)
//
// Generated by this command:
//
//	mockgen -build_flags=--mod=mod -destination=pkg/jobrunaggregator/jobrunaggregatorlib/gcs_client_mock.go -package=jobrunaggregatorlib github.com/openshift/ci-tools/pkg/jobrunaggregator/jobrunaggregatorlib CIGCSClient
//

// Package jobrunaggregatorlib is a generated GoMock package.
package jobrunaggregatorlib

import (
	context "context"
	reflect "reflect"

	logrus "github.com/sirupsen/logrus"
	gomock "go.uber.org/mock/gomock"

	jobrunaggregatorapi "github.com/openshift/ci-tools/pkg/jobrunaggregator/jobrunaggregatorapi"
)

// MockCIGCSClient is a mock of CIGCSClient interface.
type MockCIGCSClient struct {
	ctrl     *gomock.Controller
	recorder *MockCIGCSClientMockRecorder
	isgomock struct{}
}

// MockCIGCSClientMockRecorder is the mock recorder for MockCIGCSClient.
type MockCIGCSClientMockRecorder struct {
	mock *MockCIGCSClient
}

// NewMockCIGCSClient creates a new mock instance.
func NewMockCIGCSClient(ctrl *gomock.Controller) *MockCIGCSClient {
	mock := &MockCIGCSClient{ctrl: ctrl}
	mock.recorder = &MockCIGCSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCIGCSClient) EXPECT() *MockCIGCSClientMockRecorder {
	return m.recorder
}

// ReadJobRunFromGCS mocks base method.
func (m *MockCIGCSClient) ReadJobRunFromGCS(ctx context.Context, jobGCSRootLocation, jobName, jobRunID string, logger logrus.FieldLogger) (jobrunaggregatorapi.JobRunInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadJobRunFromGCS", ctx, jobGCSRootLocation, jobName, jobRunID, logger)
	ret0, _ := ret[0].(jobrunaggregatorapi.JobRunInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadJobRunFromGCS indicates an expected call of ReadJobRunFromGCS.
func (mr *MockCIGCSClientMockRecorder) ReadJobRunFromGCS(ctx, jobGCSRootLocation, jobName, jobRunID, logger any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadJobRunFromGCS", reflect.TypeOf((*MockCIGCSClient)(nil).ReadJobRunFromGCS), ctx, jobGCSRootLocation, jobName, jobRunID, logger)
}

// ReadRelatedJobRuns mocks base method.
func (m *MockCIGCSClient) ReadRelatedJobRuns(ctx context.Context, jobName, gcsPrefix, startingJobRunID, endingJobRunID string, matcherFunc ProwJobMatcherFunc) ([]jobrunaggregatorapi.JobRunInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRelatedJobRuns", ctx, jobName, gcsPrefix, startingJobRunID, endingJobRunID, matcherFunc)
	ret0, _ := ret[0].([]jobrunaggregatorapi.JobRunInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRelatedJobRuns indicates an expected call of ReadRelatedJobRuns.
func (mr *MockCIGCSClientMockRecorder) ReadRelatedJobRuns(ctx, jobName, gcsPrefix, startingJobRunID, endingJobRunID, matcherFunc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRelatedJobRuns", reflect.TypeOf((*MockCIGCSClient)(nil).ReadRelatedJobRuns), ctx, jobName, gcsPrefix, startingJobRunID, endingJobRunID, matcherFunc)
}
